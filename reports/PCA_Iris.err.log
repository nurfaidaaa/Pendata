Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/usr/local/lib/python3.10/dist-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/local/lib/python3.10/dist-packages/jupyter_core/utils/__init__.py", line 166, in wrapped
    return loop.run_until_complete(inner)
  File "/usr/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/usr/local/lib/python3.10/dist-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/usr/local/lib/python3.10/dist-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/usr/local/lib/python3.10/dist-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
from sklearn.decomposition import PCA

model = PCA(n_components=5)     # Instantiate the model with hyperparameters
model.fit(X_iris)               # Fit to data
X_2D = model.transform(X_iris)  # Transform the data to two dimensions
------------------


[0;31m[0m
[0;31mValueError[0mTraceback (most recent call last)
[0;32m<ipython-input-9-e8a2f60666cb>[0m in [0;36m<cell line: 4>[0;34m()[0m
[1;32m      2[0m [0;34m[0m[0m
[1;32m      3[0m [0mmodel[0m [0;34m=[0m [0mPCA[0m[0;34m([0m[0mn_components[0m[0;34m=[0m[0;36m5[0m[0;34m)[0m     [0;31m# Instantiate the model with hyperparameters[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 4[0;31m [0mmodel[0m[0;34m.[0m[0mfit[0m[0;34m([0m[0mX_iris[0m[0;34m)[0m               [0;31m# Fit to data[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      5[0m [0mX_2D[0m [0;34m=[0m [0mmodel[0m[0;34m.[0m[0mtransform[0m[0;34m([0m[0mX_iris[0m[0;34m)[0m  [0;31m# Transform the data to two dimensions[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/decomposition/_pca.py[0m in [0;36mfit[0;34m(self, X, y)[0m
[1;32m    433[0m         [0mself[0m[0;34m.[0m[0m_validate_params[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    434[0m [0;34m[0m[0m
[0;32m--> 435[0;31m         [0mself[0m[0;34m.[0m[0m_fit[0m[0;34m([0m[0mX[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    436[0m         [0;32mreturn[0m [0mself[0m[0;34m[0m[0;34m[0m[0m
[1;32m    437[0m [0;34m[0m[0m

[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/decomposition/_pca.py[0m in [0;36m_fit[0;34m(self, X)[0m
[1;32m    510[0m         [0;31m# Call different fits for either full or truncated SVD[0m[0;34m[0m[0;34m[0m[0m
[1;32m    511[0m         [0;32mif[0m [0mself[0m[0;34m.[0m[0m_fit_svd_solver[0m [0;34m==[0m [0;34m"full"[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 512[0;31m             [0;32mreturn[0m [0mself[0m[0;34m.[0m[0m_fit_full[0m[0;34m([0m[0mX[0m[0;34m,[0m [0mn_components[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    513[0m         [0;32melif[0m [0mself[0m[0;34m.[0m[0m_fit_svd_solver[0m [0;32min[0m [0;34m[[0m[0;34m"arpack"[0m[0;34m,[0m [0;34m"randomized"[0m[0;34m][0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    514[0m             [0;32mreturn[0m [0mself[0m[0;34m.[0m[0m_fit_truncated[0m[0;34m([0m[0mX[0m[0;34m,[0m [0mn_components[0m[0;34m,[0m [0mself[0m[0;34m.[0m[0m_fit_svd_solver[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/decomposition/_pca.py[0m in [0;36m_fit_full[0;34m(self, X, n_components)[0m
[1;32m    524[0m                 )
[1;32m    525[0m         [0;32melif[0m [0;32mnot[0m [0;36m0[0m [0;34m<=[0m [0mn_components[0m [0;34m<=[0m [0mmin[0m[0;34m([0m[0mn_samples[0m[0;34m,[0m [0mn_features[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 526[0;31m             raise ValueError(
[0m[1;32m    527[0m                 [0;34m"n_components=%r must be between 0 and "[0m[0;34m[0m[0;34m[0m[0m
[1;32m    528[0m                 [0;34m"min(n_samples, n_features)=%r with "[0m[0;34m[0m[0;34m[0m[0m

[0;31mValueError[0m: n_components=5 must be between 0 and min(n_samples, n_features)=4 with svd_solver='full'

